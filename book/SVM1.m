% This tests the support vector machine content that appears in the book.
% Only the basic plots of the input data and a few contours are provided
% here.  h1, h2, and h3 are the associated figure handles.

% To allow for the low-rank expansion parameter to be set
global GAUSSQR_PARAMETERS

% Initial example for support-vector machines
% This makes sure the same results present each times
if exist('rng','builtin')
    rng(0);
else
    rand('state',0);
    randn('state',0);
end

% Use the low rank matrix multiplication strategy
low_rank = 0;
GAUSSQR_PARAMETERS.DEFAULT_REGRESSION_FUNC = .05;

% Define our normal distributions
grnmean = [1,0];
redmean = [0,1];
grncov = eye(2);
redcov = eye(2);

% How many points of each model do we want to classify and learn from
grn_test_N = 10;
red_test_N = 10;
grn_train_N = 100;
red_train_N = 100;

% How much fudge factor do we want in our training set
grn_buffer = .2;
red_buffer = .2;

% Generate some manufactured data and attempt to classify it
% The data will be generated by normal distributions with different means
% Half of the data will come from [1,0] and half from [0,1]
grnpop = mvnrnd(grnmean,grncov,grn_test_N);
redpop = mvnrnd(redmean,redcov,red_test_N);

% Generate a training set from which to learn the classifier
grnpts = zeros(grn_train_N,2);
redpts = zeros(red_train_N,2);
for i = 1:grn_train_N
    grnpts(i,:) = mvnrnd(grnpop(ceil(rand*grn_test_N),:),grncov*grn_buffer);
end
for i = 1:red_train_N
    redpts(i,:) = mvnrnd(redpop(ceil(rand*red_test_N),:),redcov*red_buffer);
end

% Create a vector of data and associated classifications
% Green label 1, red label -1
train_data = [grnpts;redpts];
train_class = ones(grn_train_N+red_train_N,1);
train_class(grn_train_N+1:grn_train_N+red_train_N) = -1;
N_train = length(train_class);
test_data = [grnpop;redpop];
test_class = ones(grn_test_N+red_test_N,1);
test_class(grn_test_N+1:grn_test_N+red_test_N) = -1;
N_test = length(test_class);


% Scatter plot of the input data
h1 = figure;
hold on
plot(grnpop(:,1),grnpop(:,2),'g+','markersize',12)
plot(redpop(:,1),redpop(:,2),'rx','markersize',12)
plot(grnpop(:,1),grnpop(:,2),'bs','markersize',12)
plot(redpop(:,1),redpop(:,2),'bo','markersize',12)
plot(grnmean(1),grnmean(2),'gs','markersize',12,'MarkerFaceColor','g')
plot(redmean(1),redmean(2),'ro','markersize',12,'MarkerFaceColor','r')
plot(grnpts(:,1),grnpts(:,2),'g+','markersize',7)
plot(redpts(:,1),redpts(:,2),'rx','markersize',7)
hold off

% Plot a variety of contours
d = 0.02;
[CD1,CD2] = meshgrid(min(train_data(:,1)):d:max(train_data(:,1)),...
    min(train_data(:,2)):d:max(train_data(:,2)));
contour_data_fine = [CD1(:),CD2(:)];
CD3 = CD1(1:3:end,1:3:end);
CD4 = CD2(1:3:end,1:3:end);
contour_data_markers = [CD3(:),CD4(:)];

% First, fix the box constraint and consider 3 ep values
bc = 1;
epvec = [.2 1 5];
ptvec = {'o','*','none'};
h2 = figure;
hold on
h_contour = zeros(size(epvec));
for k=1:length(epvec)
    SVM = gqr_fitsvm(train_data,train_class,epvec(k),bc,low_rank);
    contour_class = SVM.eval(contour_data_fine);
    contour(CD1,CD2,reshape(contour_class,size(CD1)),[0 0],'linewidth',2);
    contour_class = SVM.eval(contour_data_markers);
    [tmp,h_contour(k)] = contour(CD3,CD4,reshape(contour_class,size(CD3)),[0 0]);
    set(get(h_contour(k),'Children'),'Marker',ptvec{k});
    set(get(h_contour(k),'Children'),'LineStyle','none');
end
title(sprintf('C=%g',bc));
set(h2,'renderer','zbuffer');
h_legend = legend(h_contour,'\epsilon=.2','\epsilon=1','\epsilon=5','location','southeast');
c=get(h_legend,'Children');
% I don't really know what I'm doing here, but it works
for k=1:length(epvec)
    set(get(get(c(2*k-1),'Children'),'Children'),'Marker',ptvec{k});
    set(get(get(c(2*k-1),'Children'),'Children'),'linewidth',2);
end
hold off

% First, fix the box constraint and consider 3 ep values
ep = 1;
bcvec = [.05 1 20];
ptvec = {'o','*','none'};
h3 = figure;
hold on
h_contour = zeros(size(epvec));
for k=1:length(epvec)
    SVM = gqr_fitsvm(train_data,train_class,ep,bcvec(k),low_rank);
    contour_class = SVM.eval(contour_data_fine);
    contour(CD1,CD2,reshape(contour_class,size(CD1)),[0 0],'linewidth',2);
    contour_class = SVM.eval(contour_data_markers);
    [tmp,h_contour(k)] = contour(CD3,CD4,reshape(contour_class,size(CD3)),[0 0]);
    set(get(h_contour(k),'Children'),'Marker',ptvec{k});
    set(get(h_contour(k),'Children'),'LineStyle','none');
end
title(sprintf('\\epsilon=%g',bc));
set(h3,'renderer','zbuffer'); % Not sure if this is necessary
h_legend = legend(h_contour,'C=.05','C=1','C=20','location','southeast');
c=get(h_legend,'Children');
% I don't really know what I'm doing here, but it works
for k=1:length(epvec)
    set(get(get(c(2*k-1),'Children'),'Children'),'Marker',ptvec{k});
    set(get(get(c(2*k-1),'Children'),'Children'),'linewidth',2);
end
hold off