GaussQR v2.0
  comments/questions: Gregory Fasshauer <fasshauer@iit.edu>
                      Mike McCourt <mccomic@iit.edu>
  (previously referred to as RBF-QR 1.x in documentation)
  
********* NOTICE *********
June 26, 2015
With the release of the text "Kernel-Based Approximation
Methods in MATLAB" in September 2015, the developers are
releasing a new version of this software with content
relevant to that book.

To improve our documentation readability and search capability,
we are also developing an XML version.  This file will remain
as a basic reference, even after that is produced
**************************

**** Basic Library Structure
Source code is kept in the source folder
Examples are kept in the examples folder
Book content is kept in the book folder
Files from external sources are kept in the fromothers folder
Experimental data is kept in the data folder

**** Basic Bootup Information
To run an example, you first boot up Matlab
Then, from the base gaussqr directory, run the setup:
  >> rbfsetup
This makes sure the necessary files are in the path

If you so choose, you can create a startup.m file somewhere
on your base MATLAB directory which will be executed when
MATLAB starts.  Including the commands
   cd /path/to/gaussqr
   rbfsetup
will start your MATLAB with GaussQR ready each time.

**** GaussQR Functionality Options
rbfsetup must always be called to prepare the directories for GaussQR.
You can use also use rbfsetup to set parameters for GaussQR; see the
file for a full list of possible parameters and default values.
After rbfsetup is called initially, you can manually access the
GaussQR object with
  >> global GAUSSQR_PARAMETERS
and then set whatever parameter you'd like.  If you do that, don't call
rbfsetup again or it will erase any changes you made.

**** Examples of GaussQR
After calling rbfsetup, you can run examples, including
>> ex1_gqr
This shows stable Gaussian interpolation in 1D
You also can use
>> ex2_mqr
This shows the use of HS-SVD for iterated Brownian Bridge kernels

List of examples:
	GaussQR
	  ex1_gqr   : Test of RBF-QR in 1D
	  ex1a_gqr  : Test of RBF-QR on sinc in 1D
	  ex2a_gqr  : Test of RBF-QRr in 1D
	  ex2b_gqr  : Test of RBF-QRr in 2D
	  ex2c_gqr  : Test of RBF-QRr on optics examples
	  ex2d_gqr  : Test of RBF-QRr in 5D
	  ex2e_gqr  : Test of RBF-QR in 2D
	  ex3_gqr   : Test of HermiteAppx
	  ex4_gqr   : Parameter study for epsilon and alpha
	  ex5_gqr   : 2-pt collocation BVP example
	  ex5b_gqr  : 2-pt BVP solver comparison
	  ex5b2_gqr : 2-pt BVP solver error distribution study
	  ex5b3_gqr : 2D BVP solver comparison
	  ex5c_gqr  : Helmholtz solver comparison
	  ex5d_gqr  : GaussQR collocation versus MFS
	  ex6_gqr   : Regression for several M values
	  ex7_gqr   : Parameter study for epsilon and M
	  ex8_gqr   : Study of condition number for regression
	  ex9_gqr   : Time test for interpolation in 1D and 2D
	  ex10_gqr  : Orthonormality test for various eigenfunctions
	  ex11_gqr  : (incomplete) Example of meshfree collocation
	  ex12_gqr  : Ill-conditioning study on derivatives
	  ex12b_gqr : Order of convergence for GaussQR derivatives
	  ex12c_gqr : Ill-conditioning for Laplacian evaluation
	  ex13_gqr  : Comparing GaussQR to MPS
	  ex13b_gqr : Incorporating GaussQR into MPS (L-shaped domain)
	  ex13c_gqr : 2D BVP MFS/MPS/FD solver comparison
	  ex14_gqr  : Fast QR speed study
	  ex15_gqr  : Nonlinear time-stepping BVP example
	  ex16_gqr  : 2D BVP tensor product solver comparison
	  ex16b_gqr : 2D BVP tensor product solver ep/alpha study
	MaternQR
	  ex1_mqr   : Basic demonstration of stable Matern elements
	  ex2_mqr   : MaternQR ill-conditioning
	  ex3_mqr   : Compact Matern series length study
	  ex4_mqr   : 1D BVP solver for different epsilon
	  ex4a_mqr  : 1D BVP solver convergence order
	  ex5_mqr   : Summer 2012 work
	  ex6_mqr   : Interpolation convergence order
	  ex6a_mqr  : Interpolation avoiding ill-conditioning

Function descriptions:
	General Functions
	  errcompute         : Computes the difference between two vectors
	  pick2Dpoints       : Returns points spaced in a certain design in 2D
	  pickfunc           : Returns a function for RBF testing
	  pickpoints         : Returns points spaced in a certain design in 1D
	  pickRBF            : Returns an RBF and maybe derivatives of it
	  ranksolve          : Solves a system of the form (eye(n)+U*VT)*X=B
	GaussQR Functions
	  computeUinvHermite : Computes a fast QR decomposition of the Hermite matrix
	  computeQReig       : Fast QR decomp of the GQR eigenfunction matrix
	  gqr_alphasearch    : Finds a good alpha for RBF-QR via orthogonality
	  gqr_formMarr       : Orders the eigenfunction indices for stability
	  gqr_phi            : Evaluates the eigenfunctions
	  gqr_eval           : Evaluates an RBF-QR approximation
	  gqr_solve          : Computes an RBF-QR interpolant
	  gqr_rsolve         : Computes an RBF-QR regression
	  gqr_roots          : Finds the roots of the eigenfunctions
	  gqr_solveprep      : Checks passed arguments to confirm they are acceptable
	  HermiteAppx        : Asymptotic approximation to Hermite polynomials
	  HermitePoly        : Evaluates 1D Hermite polynomials
	  HermiteProd        : Evaluates n-dim Hermite polynomials via tensor product
	MaternQR Functions
	  BernoulliPoly      : Evaluates the Bernoulli polynomials
	  cmatern            : Evaluates a series approximation to Compact Materns
	  mqr_eval           : Evaluate a MaternQR interpolant
	  mqr_phi            : Evaluate the Compact Matern eigenfunctions
	  mqr_solve          : Compute a Compact Matern interpolant
	  mqr_solveprep      : Prepares for a Compact Matern interpolation
	  ppsplinekernel     : Computes a piecewise polynomial spline interpolant
  
External function descriptions:
  cheb             : Produces the Trefethen Chebyshev differentiation matrix
  DifferenceMatrix : Computes matrix of differences between nodes
  DistanceMatrix   : Computes matrix A_ij = ||x_i-x_j||
  haltonseq        : Generates an n-dimensional Halton sequence
  sinc             : Evaluates the function sin(x)/x
  splinetx_natural : Finds and evaluates the natural cubic spline of data
  wamdisk          : Defines a WAM inside a 2D disk
  wamquadrangle    : Defines a WAM inside a parametrized quadrangle